/* tslint:disable */
/* eslint-disable */
/**
 * The Maritime Resource Registry API
 * The Maritime Resource Registry can be used to create and query resources that are identified by an MRN
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { MrrDTO } from '../models';
/**
 * MrrControllerApi - axios parameter creator
 * @export
 */
export const MrrControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new MRR
         * @param {MrrDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMrr: async (body: MrrDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createMrr.');
            }
            const localVarPath = `/mrr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the MRR with the given ID
         * @param {number} mrrId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (mrrId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mrrId' is not null or undefined
            if (mrrId === null || mrrId === undefined) {
                throw new RequiredError('mrrId','Required parameter mrrId was null or undefined when calling deleteById.');
            }
            const localVarPath = `/mrr/id/{mrrId}`
                .replace(`{${"mrrId"}}`, encodeURIComponent(String(mrrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the MRR for the given MRN namespace
         * @param {string} mrnNamespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByMrnNamespace: async (mrnNamespace: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mrnNamespace' is not null or undefined
            if (mrnNamespace === null || mrnNamespace === undefined) {
                throw new RequiredError('mrnNamespace','Required parameter mrnNamespace was null or undefined when calling deleteByMrnNamespace.');
            }
            const localVarPath = `/mrr/{mrnNamespace}`
                .replace(`{${"mrnNamespace"}}`, encodeURIComponent(String(mrnNamespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the MRR for the given MRN namespace
         * @param {string} mrnNamespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMrr: async (mrnNamespace: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mrnNamespace' is not null or undefined
            if (mrnNamespace === null || mrnNamespace === undefined) {
                throw new RequiredError('mrnNamespace','Required parameter mrnNamespace was null or undefined when calling getMrr.');
            }
            const localVarPath = `/mrr/{mrnNamespace}`
                .replace(`{${"mrnNamespace"}}`, encodeURIComponent(String(mrnNamespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the MRR with given ID
         * @param {number} mrrId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMrrById: async (mrrId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mrrId' is not null or undefined
            if (mrrId === null || mrrId === undefined) {
                throw new RequiredError('mrrId','Required parameter mrrId was null or undefined when calling getMrrById.');
            }
            const localVarPath = `/mrr/id/{mrrId}`
                .replace(`{${"mrrId"}}`, encodeURIComponent(String(mrrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the MRR with the given ID
         * @param {MrrDTO} body 
         * @param {number} mrrId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMrrById: async (body: MrrDTO, mrrId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateMrrById.');
            }
            // verify required parameter 'mrrId' is not null or undefined
            if (mrrId === null || mrrId === undefined) {
                throw new RequiredError('mrrId','Required parameter mrrId was null or undefined when calling updateMrrById.');
            }
            const localVarPath = `/mrr/id/{mrrId}`
                .replace(`{${"mrrId"}}`, encodeURIComponent(String(mrrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the MRR with the given MRN namespace
         * @param {MrrDTO} body 
         * @param {string} mrnNamespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMrrByMrnNamespace: async (body: MrrDTO, mrnNamespace: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateMrrByMrnNamespace.');
            }
            // verify required parameter 'mrnNamespace' is not null or undefined
            if (mrnNamespace === null || mrnNamespace === undefined) {
                throw new RequiredError('mrnNamespace','Required parameter mrnNamespace was null or undefined when calling updateMrrByMrnNamespace.');
            }
            const localVarPath = `/mrr/{mrnNamespace}`
                .replace(`{${"mrnNamespace"}}`, encodeURIComponent(String(mrnNamespace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MrrControllerApi - functional programming interface
 * @export
 */
export const MrrControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new MRR
         * @param {MrrDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMrr(body: MrrDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MrrDTO>>> {
            const localVarAxiosArgs = await MrrControllerApiAxiosParamCreator(configuration).createMrr(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes the MRR with the given ID
         * @param {number} mrrId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(mrrId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MrrControllerApiAxiosParamCreator(configuration).deleteById(mrrId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes the MRR for the given MRN namespace
         * @param {string} mrnNamespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByMrnNamespace(mrnNamespace: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MrrControllerApiAxiosParamCreator(configuration).deleteByMrnNamespace(mrnNamespace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the MRR for the given MRN namespace
         * @param {string} mrnNamespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMrr(mrnNamespace: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MrrDTO>>> {
            const localVarAxiosArgs = await MrrControllerApiAxiosParamCreator(configuration).getMrr(mrnNamespace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the MRR with given ID
         * @param {number} mrrId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMrrById(mrrId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MrrDTO>>> {
            const localVarAxiosArgs = await MrrControllerApiAxiosParamCreator(configuration).getMrrById(mrrId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the MRR with the given ID
         * @param {MrrDTO} body 
         * @param {number} mrrId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMrrById(body: MrrDTO, mrrId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MrrControllerApiAxiosParamCreator(configuration).updateMrrById(body, mrrId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the MRR with the given MRN namespace
         * @param {MrrDTO} body 
         * @param {string} mrnNamespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMrrByMrnNamespace(body: MrrDTO, mrnNamespace: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MrrControllerApiAxiosParamCreator(configuration).updateMrrByMrnNamespace(body, mrnNamespace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MrrControllerApi - factory interface
 * @export
 */
export const MrrControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new MRR
         * @param {MrrDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMrr(body: MrrDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<MrrDTO>> {
            return MrrControllerApiFp(configuration).createMrr(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the MRR with the given ID
         * @param {number} mrrId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(mrrId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MrrControllerApiFp(configuration).deleteById(mrrId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the MRR for the given MRN namespace
         * @param {string} mrnNamespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByMrnNamespace(mrnNamespace: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MrrControllerApiFp(configuration).deleteByMrnNamespace(mrnNamespace, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the MRR for the given MRN namespace
         * @param {string} mrnNamespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMrr(mrnNamespace: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MrrDTO>> {
            return MrrControllerApiFp(configuration).getMrr(mrnNamespace, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the MRR with given ID
         * @param {number} mrrId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMrrById(mrrId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<MrrDTO>> {
            return MrrControllerApiFp(configuration).getMrrById(mrrId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the MRR with the given ID
         * @param {MrrDTO} body 
         * @param {number} mrrId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMrrById(body: MrrDTO, mrrId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MrrControllerApiFp(configuration).updateMrrById(body, mrrId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the MRR with the given MRN namespace
         * @param {MrrDTO} body 
         * @param {string} mrnNamespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMrrByMrnNamespace(body: MrrDTO, mrnNamespace: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MrrControllerApiFp(configuration).updateMrrByMrnNamespace(body, mrnNamespace, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MrrControllerApi - object-oriented interface
 * @export
 * @class MrrControllerApi
 * @extends {BaseAPI}
 */
export class MrrControllerApi extends BaseAPI {
    /**
     * Creates a new MRR
     * @param {MrrDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MrrControllerApi
     */
    public async createMrr(body: MrrDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<MrrDTO>> {
        return MrrControllerApiFp(this.configuration).createMrr(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the MRR with the given ID
     * @param {number} mrrId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MrrControllerApi
     */
    public async deleteById(mrrId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MrrControllerApiFp(this.configuration).deleteById(mrrId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes the MRR for the given MRN namespace
     * @param {string} mrnNamespace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MrrControllerApi
     */
    public async deleteByMrnNamespace(mrnNamespace: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MrrControllerApiFp(this.configuration).deleteByMrnNamespace(mrnNamespace, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the MRR for the given MRN namespace
     * @param {string} mrnNamespace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MrrControllerApi
     */
    public async getMrr(mrnNamespace: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<MrrDTO>> {
        return MrrControllerApiFp(this.configuration).getMrr(mrnNamespace, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the MRR with given ID
     * @param {number} mrrId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MrrControllerApi
     */
    public async getMrrById(mrrId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<MrrDTO>> {
        return MrrControllerApiFp(this.configuration).getMrrById(mrrId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the MRR with the given ID
     * @param {MrrDTO} body 
     * @param {number} mrrId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MrrControllerApi
     */
    public async updateMrrById(body: MrrDTO, mrrId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MrrControllerApiFp(this.configuration).updateMrrById(body, mrrId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the MRR with the given MRN namespace
     * @param {MrrDTO} body 
     * @param {string} mrnNamespace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MrrControllerApi
     */
    public async updateMrrByMrnNamespace(body: MrrDTO, mrnNamespace: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MrrControllerApiFp(this.configuration).updateMrrByMrnNamespace(body, mrnNamespace, options).then((request) => request(this.axios, this.basePath));
    }
}
