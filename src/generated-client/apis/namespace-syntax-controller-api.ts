/* tslint:disable */
/* eslint-disable */
/**
 * The Maritime Resource Registry API
 * The Maritime Resource Registry can be used to create and query resources that are identified by an MRN
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { NamespaceSyntaxDTO } from '../models';
/**
 * NamespaceSyntaxControllerApi - axios parameter creator
 * @export
 */
export const NamespaceSyntaxControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the syntax definition that applies to the given MRN
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamespaceSyntaxForMrn: async (mrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mrn' is not null or undefined
            if (mrn === null || mrn === undefined) {
                throw new RequiredError('mrn','Required parameter mrn was null or undefined when calling getNamespaceSyntaxForMrn.');
            }
            const localVarPath = `/syntax/{mrn}`
                .replace(`{${"mrn"}}`, encodeURIComponent(String(mrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NamespaceSyntaxControllerApi - functional programming interface
 * @export
 */
export const NamespaceSyntaxControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the syntax definition that applies to the given MRN
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNamespaceSyntaxForMrn(mrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<NamespaceSyntaxDTO>>> {
            const localVarAxiosArgs = await NamespaceSyntaxControllerApiAxiosParamCreator(configuration).getNamespaceSyntaxForMrn(mrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NamespaceSyntaxControllerApi - factory interface
 * @export
 */
export const NamespaceSyntaxControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns the syntax definition that applies to the given MRN
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNamespaceSyntaxForMrn(mrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<NamespaceSyntaxDTO>> {
            return NamespaceSyntaxControllerApiFp(configuration).getNamespaceSyntaxForMrn(mrn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NamespaceSyntaxControllerApi - object-oriented interface
 * @export
 * @class NamespaceSyntaxControllerApi
 * @extends {BaseAPI}
 */
export class NamespaceSyntaxControllerApi extends BaseAPI {
    /**
     * Returns the syntax definition that applies to the given MRN
     * @param {string} mrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamespaceSyntaxControllerApi
     */
    public async getNamespaceSyntaxForMrn(mrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<NamespaceSyntaxDTO>> {
        return NamespaceSyntaxControllerApiFp(this.configuration).getNamespaceSyntaxForMrn(mrn, options).then((request) => request(this.axios, this.basePath));
    }
}
